import { CustomText, BaseEditor, BaseRange, Range, Element } from 'slate'
import { ReactEditor } from 'slate-react'
import { HistoryEditor } from 'slate-history'
import {BlockQuoteElement
  ,HeadingOneElement
  , HeadingTwoElement
  , ImageElement
  , BulletedListElement
  , NumberedListElement
  , ListItemElement
  , ParagraphElement, CustomText } from './type'

export type CustomText = {
  bold?: boolean
  italic?: boolean
  code?: boolean
  underline?: boolean
  text: string
}

export type CheckListItemElement = {
  type: 'check-list-item'
  checked: boolean
  children: CustomText[]
}

export type EditableVoidElement = {
  type: 'editable-void'
  children: CustomText[]
}

export type LinkElement = { type: 'link'; url: string; children: CustomText[] }

export type ButtonElement = { type: 'button'; children: CustomText[] }

export type BadgeElement = { type: 'badge'; children: CustomText[] }

export type ListItemElement = { type: 'list-item'; children: CustomText[] }

export type MentionElement = {
  type: 'mention'
  character: string
  children: CustomText[]
}

export type ParagraphElement = {
  type: 'paragraph'
  align?: string
  children: CustomText[]
}

export type TableElement = { type: 'table'; children: TableRow[] }

export type TableCellElement = { type: 'table-cell'; children: CustomText[] }

export type TableRowElement = { type: 'table-row'; children: TableCell[] }

export type TitleElement = { type: 'title'; children: CustomText[] }

export type VideoElement = { type: 'video'; url: string; children: CustomText[] }

export type CodeBlockElement = {
  type: 'code-block'
  language: string
  children: CustomText[]
}

export type CodeLineElement = {
  type: 'code-line'
  children: CustomText[]
}


  
  // | CheckListItemElement
  // | EditableVoidElement
  // | LinkElement
  // | ButtonElement
  // | BadgeElement
  // | MentionElement
  // | TableElement
  // | TableRowElement
  // | TableCellElement
  // | TitleElement
  // | VideoElement
  // | CodeBlockElement
  // | CodeLineElement


export type CustomEditor = BaseEditor &
  ReactEditor &
  HistoryEditor & {
    nodeToDecorations?: Map<Element, Range[]>
  }


export interface TextInterface {
  isText: (value: unknown) => value is Text;
}

export type CustomElement =
  | BlockQuoteElement
  | HeadingOneElement
  | HeadingTwoElement
  | ImageElement
  | BulletedListElement
  | NumberedListElement
  | ListItemElement
  | ParagraphElement

declare module 'slate' {
  interface CustomTypes {
    Editor: CustomEditor
    Element: CustomElement
    Text: CustomText
    Range: BaseRange & {
      [key: string]: unknown
    }
  }
}

// export type Node = CustomEditor|CustomElement|CustomText

// export interface EditorInterface {
//     /**
//      * Get the ancestor above a location in the document.
//      */
//     above: <T extends Ancestor>(editor: Editor, options?: EditorAboveOptions<T>) => NodeEntry<T> | undefined;
//     /**
//      * Add a custom property to the leaf text nodes in the current selection.
//      *
//      * If the selection is currently collapsed, the marks will be added to the
//      * `editor.marks` property instead, and applied when text is inserted next.
//      */
//     addMark: (editor: Editor, key: string, value: any) => void;
//     /**
//      * Get the point after a location.
//      */
//     after: (editor: Editor, at: Location, options?: EditorAfterOptions) => Point | undefined;
//     /**
//      * Get the point before a location.
//      */
//     before: (editor: Editor, at: Location, options?: EditorBeforeOptions) => Point | undefined;
//     /**
//      * Delete content in the editor backward from the current selection.
//      */
//     deleteBackward: (editor: Editor, options?: EditorDirectedDeletionOptions) => void;
//     /**
//      * Delete content in the editor forward from the current selection.
//      */
//     deleteForward: (editor: Editor, options?: EditorDirectedDeletionOptions) => void;
//     /**
//      * Delete the content in the current selection.
//      */
//     deleteFragment: (editor: Editor, options?: EditorFragmentDeletionOptions) => void;
//     /**
//      * Get the start and end points of a location.
//      */
//     edges: (editor: Editor, at: Location) => [Point, Point];
//     /**
//      * Match a read-only element in the current branch of the editor.
//      */
//     elementReadOnly: (editor: Editor, options?: EditorElementReadOnlyOptions) => NodeEntry<Element> | undefined;
//     /**
//      * Get the end point of a location.
//      */
//     end: (editor: Editor, at: Location) => Point;
//     /**
//      * Get the first node at a location.
//      */
//     first: (editor: Editor, at: Location) => NodeEntry;
//     /**
//      * Get the fragment at a location.
//      */
//     fragment: (editor: Editor, at: Location) => Descendant[];
//     /**
//      * Check if a node has block children.
//      */
//     hasBlocks: (editor: Editor, element: Element) => boolean;
//     /**
//      * Check if a node has inline and text children.
//      */
//     hasInlines: (editor: Editor, element: Element) => boolean;
//     hasPath: (editor: Editor, path: Path) => boolean;
//     /**
//      * Check if a node has text children.
//      */
//     hasTexts: (editor: Editor, element: Element) => boolean;
//     /**
//      * Insert a block break at the current selection.
//      *
//      * If the selection is currently expanded, it will be deleted first.
//      */
//     insertBreak: (editor: Editor) => void;
//     /**
//      * Inserts a fragment
//      * at the specified location or (if not defined) the current selection or (if not defined) the end of the document.
//      */
//     insertFragment: (editor: Editor, fragment: Node[], options?: TextInsertFragmentOptions) => void;
//     /**
//      * Atomically inserts `nodes`
//      * at the specified location or (if not defined) the current selection or (if not defined) the end of the document.
//      */
//     insertNode: <T extends Node>(editor: Editor, node: Node, options?: NodeInsertNodesOptions<T>) => void;
//     /**
//      * Insert a soft break at the current selection.
//      *
//      * If the selection is currently expanded, it will be deleted first.
//      */
//     insertSoftBreak: (editor: Editor) => void;
//     /**
//      * Insert a string of text
//      * at the specified location or (if not defined) the current selection or (if not defined) the end of the document.
//      */
//     insertText: (editor: Editor, text: string, options?: TextInsertTextOptions) => void;
//     /**
//      * Check if a value is a block `Element` object.
//      */
//     isBlock: (editor: Editor, value: Element) => boolean;
//     /**
//      * Check if a point is an edge of a location.
//      */
//     isEdge: (editor: Editor, point: Point, at: Location) => boolean;
//     /**
//      * Check if a value is an `Editor` object.
//      */
//     isEditor: (value: any) => value is Editor;
//     /**
//      * Check if a value is a read-only `Element` object.
//      */
//     isElementReadOnly: (editor: Editor, element: Element) => boolean;
//     /**
//      * Check if an element is empty, accounting for void nodes.
//      */
//     isEmpty: (editor: Editor, element: Element) => boolean;
//     /**
//      * Check if a point is the end point of a location.
//      */
//     isEnd: (editor: Editor, point: Point, at: Location) => boolean;
//     /**
//      * Check if a value is an inline `Element` object.
//      */
//     isInline: (editor: Editor, value: Element) => boolean;
//     /**
//      * Check if the editor is currently normalizing after each operation.
//      */
//     isNormalizing: (editor: Editor) => boolean;
//     /**
//      * Check if a value is a selectable `Element` object.
//      */
//     isSelectable: (editor: Editor, element: Element) => boolean;
//     /**
//      * Check if a point is the start point of a location.
//      */
//     isStart: (editor: Editor, point: Point, at: Location) => boolean;
//     /**
//      * Check if a value is a void `Element` object.
//      */
//     isVoid: (editor: Editor, value: Element) => boolean;
//     /**
//      * Get the last node at a location.
//      */
//     last: (editor: Editor, at: Location) => NodeEntry;
//     /**
//      * Get the leaf text node at a location.
//      */
//     leaf: (editor: Editor, at: Location, options?: EditorLeafOptions) => NodeEntry<Text>;
//     /**
//      * Iterate through all of the levels at a location.
//      */
//     levels: <T extends Node>(editor: Editor, options?: EditorLevelsOptions<T>) => Generator<NodeEntry<T>, void, undefined>;
//     /**
//      * Get the marks that would be added to text at the current selection.
//      */
//     marks: (editor: Editor) => Omit<Text, 'text'> | null;
//     /**
//      * Get the matching node in the branch of the document after a location.
//      */
//     next: <T extends Descendant>(editor: Editor, options?: EditorNextOptions<T>) => NodeEntry<T> | undefined;
//     /**
//      * Get the node at a location.
//      */
//     node: (editor: Editor, at: Location, options?: EditorNodeOptions) => NodeEntry;
//     /**
//      * Iterate through all of the nodes in the Editor.
//      */
//     nodes: <T extends Node>(editor: Editor, options?: EditorNodesOptions<T>) => Generator<NodeEntry<T>, void, undefined>;
//     /**
//      * Normalize any dirty objects in the editor.
//      */
//     normalize: (editor: Editor, options?: EditorNormalizeOptions) => void;
//     /**
//      * Get the parent node of a location.
//      */
//     parent: (editor: Editor, at: Location, options?: EditorParentOptions) => NodeEntry<Ancestor>;
//     /**
//      * Get the path of a location.
//      */
//     path: (editor: Editor, at: Location, options?: EditorPathOptions) => Path;
//     /**
//      * Create a mutable ref for a `Path` object, which will stay in sync as new
//      * operations are applied to the editor.
//      */
//     pathRef: (editor: Editor, path: Path, options?: EditorPathRefOptions) => PathRef;
//     /**
//      * Get the set of currently tracked path refs of the editor.
//      */
//     pathRefs: (editor: Editor) => Set<PathRef>;
//     /**
//      * Get the start or end point of a location.
//      */
//     point: (editor: Editor, at: Location, options?: EditorPointOptions) => Point;
//     /**
//      * Create a mutable ref for a `Point` object, which will stay in sync as new
//      * operations are applied to the editor.
//      */
//     pointRef: (editor: Editor, point: Point, options?: EditorPointRefOptions) => PointRef;
//     /**
//      * Get the set of currently tracked point refs of the editor.
//      */
//     pointRefs: (editor: Editor) => Set<PointRef>;
//     /**
//      * Return all the positions in `at` range where a `Point` can be placed.
//      *
//      * By default, moves forward by individual offsets at a time, but
//      * the `unit` option can be used to to move by character, word, line, or block.
//      *
//      * The `reverse` option can be used to change iteration direction.
//      *
//      * Note: By default void nodes are treated as a single point and iteration
//      * will not happen inside their content unless you pass in true for the
//      * `voids` option, then iteration will occur.
//      */
//     positions: (editor: Editor, options?: EditorPositionsOptions) => Generator<Point, void, undefined>;
//     /**
//      * Get the matching node in the branch of the document before a location.
//      */
//     previous: <T extends Node>(editor: Editor, options?: EditorPreviousOptions<T>) => NodeEntry<T> | undefined;
//     /**
//      * Get a range of a location.
//      */
//     range: (editor: Editor, at: Location, to?: Location) => Range;
//     /**
//      * Create a mutable ref for a `Range` object, which will stay in sync as new
//      * operations are applied to the editor.
//      */
//     rangeRef: (editor: Editor, range: Range, options?: EditorRangeRefOptions) => RangeRef;
//     /**
//      * Get the set of currently tracked range refs of the editor.
//      */
//     rangeRefs: (editor: Editor) => Set<RangeRef>;
//     /**
//      * Remove a custom property from all of the leaf text nodes in the current
//      * selection.
//      *
//      * If the selection is currently collapsed, the removal will be stored on
//      * `editor.marks` and applied to the text inserted next.
//      */
//     removeMark: (editor: Editor, key: string) => void;
//     /**
//      * Manually set if the editor should currently be normalizing.
//      *
//      * Note: Using this incorrectly can leave the editor in an invalid state.
//      *
//      */
//     setNormalizing: (editor: Editor, isNormalizing: boolean) => void;
//     /**
//      * Get the start point of a location.
//      */
//     start: (editor: Editor, at: Location) => Point;
//     /**
//      * Get the text string content of a location.
//      *
//      * Note: by default the text of void nodes is considered to be an empty
//      * string, regardless of content, unless you pass in true for the voids option
//      */
//     string: (editor: Editor, at: Location, options?: EditorStringOptions) => string;
//     /**
//      * Convert a range into a non-hanging one.
//      */
//     unhangRange: (editor: Editor, range: Range, options?: EditorUnhangRangeOptions) => Range;
//     /**
//      * Match a void node in the current branch of the editor.
//      */
//     void: (editor: Editor, options?: EditorVoidOptions) => NodeEntry<Element> | undefined;
//     /**
//      * Call a function, deferring normalization until after it completes.
//      */
//     withoutNormalizing: (editor: Editor, fn: () => void) => void;
// }